import streamlit as st
from database import get_connection, release_connection
import psycopg2.extras
from datetime import datetime
import pytz
from utils import get_catalogo_servicos, consultar_placa_comercial, formatar_telefone, formatar_placa

MS_TZ = pytz.timezone('America/Campo_Grande')

def app():
    st.title("üìã Cadastro R√°pido de Servi√ßos")
    st.markdown("Use esta p√°gina para um fluxo r√°pido de cadastro de servi√ßos para um ve√≠culo.")
    
    # --- INICIALIZA√á√ÉO DO ESTADO DA SESS√ÉO ---
    if "cadastro_servico_state" not in st.session_state:
        st.session_state.cadastro_servico_state = {
            "placa_input": "", "veiculo_id": None, "veiculo_info": None,
            "search_triggered": False # Novo estado para controlar a busca
        }
    state = st.session_state.cadastro_servico_state

    if 'servicos_para_adicionar' not in st.session_state:
        st.session_state.servicos_para_adicionar = []
    
    st.markdown("---")
    st.header("1Ô∏è‚É£ Identifica√ß√£o do Ve√≠culo")

    # --- NOVO FLUXO DE BUSCA ---
    placa_input = st.text_input("Digite a placa do ve√≠culo", value=state.get("placa_input", ""), key="placa_input_key").upper()

    # Bot√£o principal para iniciar a verifica√ß√£o
    if st.button("Verificar Placa no Sistema", use_container_width=True, type="primary"):
        # Atualiza o estado com a placa digitada e dispara a busca
        state["placa_input"] = placa_input
        state["search_triggered"] = True
        # Limpa os dados de buscas anteriores para garantir consist√™ncia
        state["veiculo_id"] = None
        state["veiculo_info"] = None
        for key in ['api_vehicle_data', 'modelo_aceito', 'ano_aceito']:
            if key in st.session_state:
                del st.session_state[key]
        st.rerun()

    # A l√≥gica principal da p√°gina s√≥ √© executada se uma busca foi disparada
    if state.get("search_triggered"):
        
        # Passo 1: Tenta buscar o ve√≠culo no banco de dados local (apenas uma vez)
        if state.get("veiculo_info") is None:
            conn = get_connection()
            if conn:
                try:
                    with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
                        query = "SELECT id, empresa, modelo, ano_modelo, nome_motorista, contato_motorista FROM veiculos WHERE placa = %s"
                        cursor.execute(query, (formatar_placa(state["placa_input"]),))
                        resultado = cursor.fetchone()
                        if resultado:
                            state["veiculo_id"] = resultado["id"]
                            state["veiculo_info"] = resultado
                finally:
                    release_connection(conn)

        # --- FLUXO 1: SE O VE√çCULO FOI ENCONTRADO NO BANCO ---
        if state.get("veiculo_id"):
            # Exibe os dados do ve√≠culo e o bot√£o para alterar
            col1, col2 = st.columns([0.7, 0.3])
            with col1:
                st.success(
                    f"**Ve√≠culo Encontrado:** {state['veiculo_info']['modelo']} | **Ano:** {state['veiculo_info']['ano_modelo'] or 'N/A'}\n\n"
                    f"**Empresa:** {state['veiculo_info']['empresa']}\n\n"
                    f"**Motorista:** {state['veiculo_info']['nome_motorista'] or 'N/A'} | **Contato:** {state['veiculo_info']['contato_motorista'] or 'N/A'}"
                )
            with col2:
                if st.button("üîÑ Alterar Dados", use_container_width=True):
                    st.session_state.show_edit_form = not st.session_state.get('show_edit_form', False)
                    st.rerun()

            # Formul√°rio de edi√ß√£o
            if st.session_state.get('show_edit_form', False):
                with st.form("form_edit_veiculo"):
                    st.info("Altere os dados do ve√≠culo e salve.")
                    nova_empresa = st.text_input("Empresa", value=state['veiculo_info']['empresa'])
                    novo_modelo = st.text_input("Modelo", value=state['veiculo_info']['modelo'])
                    novo_ano = st.number_input("Ano do Modelo", min_value=1950, max_value=datetime.now().year + 1, value=int(state['veiculo_info']['ano_modelo'] or datetime.now().year), step=1)
                    novo_motorista = st.text_input("Nome do Motorista", value=state['veiculo_info']['nome_motorista'])
                    novo_contato = st.text_input("Contato do Motorista", value=state['veiculo_info']['contato_motorista'])
                    
                    if st.form_submit_button("‚úÖ Salvar Altera√ß√µes"):
                        contato_formatado = formatar_telefone(novo_contato)
                        conn = get_connection()
                        if conn:
                            # (L√≥gica para salvar a edi√ß√£o no banco)
                            pass
            
            # SE√á√ÉO DE SELE√á√ÉO DE SERVI√áOS (aparece junto com os dados do ve√≠culo)
            st.markdown("---")
            st.header("2Ô∏è‚É£ Sele√ß√£o de Servi√ßos")
            # (O c√≥digo para selecionar servi√ßos, adicionar √† lista, etc., entra aqui)
            pass

        # --- FLUXO 2: SE O VE√çCULO N√ÉO FOI ENCONTRADO NO BANCO ---
        else:
            st.warning("Ve√≠culo n√£o encontrado no seu banco de dados. Para cadastr√°-lo, busque os dados na API ou preencha manualmente abaixo.")
            
            if st.button("üîé Buscar Dados Externos (API)", use_container_width=True):
                with st.spinner("Consultando API..."):
                    sucesso, resultado = consultar_placa_comercial(state["placa_input"])
                    if sucesso:
                        st.session_state.api_vehicle_data = resultado
                    else:
                        st.error(resultado)
                st.rerun()

            # L√≥gica de confirma√ß√£o da API
            if 'api_vehicle_data' in st.session_state and st.session_state.api_vehicle_data:
                # (c√≥digo da caixa de di√°logo de confirma√ß√£o permanece o mesmo)
                pass

            # Formul√°rio de cadastro de novo ve√≠culo
            if not st.session_state.get('api_vehicle_data'):
                with st.expander("Cadastrar Novo Ve√≠culo Manualmente", expanded=True):
                    with st.form("form_novo_veiculo_rapido"):
                        # (c√≥digo do formul√°rio de novo cadastro permanece o mesmo)
                        pass

    # Bot√£o de limpar a tela (vis√≠vel se algo foi digitado)
    if state["placa_input"]:
        if st.button("Limpar e Iniciar Nova Busca"):
            # Limpa todos os estados da sess√£o
            for key in list(st.session_state.keys()):
                if key.startswith("cadastro_servico") or key in ['servicos_para_adicionar', 'api_vehicle_data', 'modelo_aceito', 'ano_aceito', 'show_edit_form']:
                    del st.session_state[key]
            st.rerun()